import requests

def obtener_peliculas():
    """Obtiene la lista de películas desde SWAPI."""
    peliculas = []
    url = "https://swapi.dev/api/films/"
    
    while url:
        response = requests.get(url)
        data = response.json()
        peliculas.extend(data['results'])
        url = data['next']  
    
    return peliculas

def mostrar_peliculas(peliculas):
    """Muestra la lista de películas con la información requerida."""
    for pelicula in peliculas:
        titulo = pelicula.get('title', 'Desconocido')
        episodio = pelicula.get('episode_id', 'Desconocido')
        fecha_lanzamiento = pelicula.get('release_date', 'Desconocido')
        opening_crawl = pelicula.get('opening_crawl', 'Desconocido')
        director = pelicula.get('director', 'Desconocido')

        print(f"Título: {titulo}")
        print(f"Episodio: {episodio}")
        print(f"Fecha de lanzamiento: {fecha_lanzamiento}")
        print(f"Opening Crawl: {opening_crawl}")
        print(f"Director: {director}")
        print("-" * 40)  
def obtener_especies():
    """Obtiene la lista de especies desde SWAPI."""
    especies = []
    url = "https://swapi.dev/api/species/"
    
    while url:
        response = requests.get(url)
        data = response.json()
        especies.extend(data['results'])
        url = data['next']  
    
    return especies

def obtener_planeta(planeta_url):
    """Obtiene el nombre del planeta de origen desde SWAPI."""
    if planeta_url:
        response = requests.get(planeta_url)
        return response.json().get('name', 'Desconocido')
    return 'Desconocido'

def obtener_personajes(personajes_urls):
    """Obtiene los nombres de los personajes que pertenecen a la especie."""
    personajes = []
    for url in personajes_urls:
        response = requests.get(url)
        personajes.append(response.json().get('name', 'Desconocido'))
    return personajes

def obtener_episodios(films_urls):
    """Obtiene los nombres de los episodios en los que aparece la especie."""
    episodios = []
    for url in films_urls:
        response = requests.get(url)
        episodios.append(response.json().get('title', 'Desconocido'))
    return episodios

def mostrar_especies(especies):
    """Muestra la lista de especies con la información requerida."""
    for especie in sorted(especies, key=lambda x: x['url']):
        nombre = especie.get('name', 'Desconocido')
        altura = especie.get('average_height', 'Desconocido')
        clasificacion = especie.get('classification', 'Desconocido')
        planeta_origen = obtener_planeta(especie.get('homeworld'))
        lengua_materna = especie.get('language', 'Desconocido')
        personajes = obtener_personajes(especie.get('people', []))
        episodios = obtener_episodios(especie.get('films', []))

        print(f"Nombre: {nombre}")
        print(f"Altura promedio: {altura}")
        print(f"Clasificación: {clasificacion}")
        print(f"Planeta de origen: {planeta_origen}")
        print(f"Lengua materna: {lengua_materna}")
        print(f"Personajes: {', '.join(personajes) if personajes else 'Ninguno'}")
        print(f"Episodios: {', '.join(episodios) if episodios else 'Ninguno'}")
        print("-" * 40) 

def obtener_planetas():
    """Obtiene la lista de planetas desde SWAPI."""
    planetas = []
    url = "https://swapi.dev/api/planets/"
    
    while url:
        response = requests.get(url)
        data = response.json()
        planetas.extend(data['results'])
        url = data['next'] 
    
    return planetas

def obtener_personajes(planeta_urls):
    """Obtiene los nombres de los personajes que pertenecen al planeta."""
    personajes = []
    for url in planeta_urls:
        response = requests.get(url)
        personajes.append(response.json().get('name', 'Desconocido'))
    return personajes

def mostrar_planetas(planetas):
    """Muestra la lista de planetas con la información requerida."""
    for planeta in planetas:
        nombre = planeta.get('name', 'Desconocido')
        periodo_orbita = planeta.get('orbital_period', 'Desconocido')
        periodo_rotacion = planeta.get('rotation_period', 'Desconocido')
        cantidad_habitantes = planeta.get('population', 'Desconocido')
        clima = planeta.get('climate', 'Desconocido')
        episodios = obtener_episodios(planeta.get('films', []))
        personajes = obtener_personajes(planeta.get('residents', []))

        print(f"Nombre: {nombre}")
        print(f"Periodo de órbita: {periodo_orbita}")
        print(f"Periodo de rotación: {periodo_rotacion}")
        print(f"Cantidad de habitantes: {cantidad_habitantes}")
        print(f"Clima: {clima}")
        print(f"Episodios: {', '.join(episodios) if episodios else 'Ninguno'}")
        print(f"Personajes: {', '.join(personajes) if personajes else 'Ninguno'}")
        print("-" * 40)  

def buscar_personajes(cadena):
    """Busca personajes que coincidan con una cadena de caracteres parcial."""
    url = "https://swapi.dev/api/people/"
    personajes = []
    
    while url:
        response = requests.get(url)
        data = response.json()
        personajes.extend(data['results'])
        url = data['next']  

    # Filtrar personajes que coinciden con la cadena de búsqueda
    personajes_encontrados = [p for p in personajes if cadena.lower() in p['name'].lower()]
    return personajes_encontrados

def obtener_detalles_personaje(personaje):
    """Obtiene detalles del personaje como planeta de origen, episodios, etc."""
    def obtener_nombre(url):
        if url:
            response = requests.get(url)
            if response.status_code == 200:
                return response.json().get('name', 'Desconocido')
            else:
                print(f"Error al obtener datos de la URL: {url}")
                return 'Desconocido'
        return 'Desconocido'
    
    def obtener_titulos(urls):
        titulos = []
        for url in urls:
            if url:
                response = requests.get(url)
                if response.status_code == 200:
                    data = response.json()
                    titulos.append(data.get('title', 'Desconocido'))
                else:
                    print(f"Error al obtener datos de la URL: {url}")
                    titulos.append('Desconocido')
        return titulos

    planeta_origen = obtener_nombre(personaje.get('homeworld'))
    episodios = obtener_titulos(personaje.get('films', []))
    especie = obtener_nombre(personaje.get('species', [])[0] if personaje.get('species') else None)
    naves = obtener_titulos(personaje.get('starships', []))
    vehiculos = obtener_titulos(personaje.get('vehicles', []))
    
    return {
        'nombre': personaje.get('name', 'Desconocido'),
        'planeta_origen': planeta_origen,
        'episodios': episodios,
        'genero': personaje.get('gender', 'Desconocido'),
        'especie': especie,
        'naves': naves,
        'vehiculos': vehiculos
    }

def mostrar_personajes(personajes):
    """Muestra la lista de personajes con la información requerida."""
    for personaje in personajes:
        detalles = obtener_detalles_personaje(personaje)
        print(f"Nombre: {detalles['nombre']}")
        print(f"Planeta de origen: {detalles['planeta_origen']}")
        print(f"Episodios: {', '.join(detalles['episodios']) if detalles['episodios'] else 'Ninguno'}")
        print(f"Género: {detalles['genero']}")
        print(f"Especie: {detalles['especie']}")
        print(f"Naves: {', '.join(detalles['naves']) if detalles['naves'] else 'Ninguno'}")
        print(f"Vehículos: {', '.join(detalles['vehiculos']) if detalles['vehiculos'] else 'Ninguno'}")
        print("-" * 40)  # Separador entre personajes

def menu_principal():
    """Muestra el menú principal del sistema."""
    while True:
        print("Menu Principal:")
        print("1. Listar películas de Star Wars")
        print("2. Listar especies de Star Wars")
        print("3. Listar planetas de Star Wars")
        print("4. Buscar personajes")
        print("5. Salir")
        opcion = input("Seleccione una opción: ")

        if opcion == "1":
            peliculas = obtener_peliculas()
            mostrar_peliculas(peliculas)
        elif opcion == "2":
            especies = obtener_especies()
            mostrar_especies(especies)
        elif opcion == "3":
            planetas = obtener_planetas()
            mostrar_planetas(planetas)
        elif opcion == "4":
            cadena = input("Ingrese una cadena de caracteres para buscar personajes: ")
            personajes = buscar_personajes(cadena)
            mostrar_personajes(personajes)
        elif opcion == "5":
            print("¡Hasta luego!")
            break
        else:
            print("Opción no válida, por favor intente de nuevo.")

# Ejecutar el programa
if __name__ == "__main__":
    menu_principal()

